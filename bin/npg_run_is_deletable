#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin $Script);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Log::Log4perl qw{:levels};

use npg_pipeline::validation;

our $VERSION = '0';

my $verbose = npg_pipeline::validation->process_argv()
                                      ->cli_params()->{'verbose'};

my $my_log_level    = $verbose ? 'DEBUG' : 'INFO';
my $their_log_level = $verbose ? 'DEBUG' : 'WARN';

##no critic (ValuesAndExpressions::ProhibitImplicitNewlines)
my $log4perl_config = qq(
  log4perl.logger                                  = $my_log_level, A1
  log4perl.category.npg_pipeline.validation.irods  = $their_log_level, A1
  log4perl.category.npg_pipeline.validation.autoqc = $their_log_level, A1
  log4perl.logger.WTSI.NPG.iRODS                   = OFF, A1
  log4perl.logger.WTSI.DNAP.Utilities.Runnable     = OFF, A1
  log4perl.appender.A1        = Log::Log4perl::Appender::Screen
  log4perl.appender.A1.layout = Log::Log4perl::Layout::PatternLayout
  log4perl.appender.A1.layout.ConversionPattern = %d %-5p %c - %m%n
  log4perl.appender.A1.utf8   = 1
  # Prevent duplicate messages with a non-Log4j-compliant Log4perl option
  log4perl.oneMessagePerAppender = 1
);
##use critic

Log::Log4perl::init(\$log4perl_config);

my $v = npg_pipeline::validation->new_with_options();
$v->info(sprintf '%s Running %s for run %i, runfolder %s',
                 '*****', $Bin . q[/] . $Script, $v->id_run, $v->runfolder_path);

my $deletable = $v->run();

$v->info(sprintf 'Run %i is %sdeletable.', $v->id_run, $deletable ? q[] : q[NOT ]);

exit not $deletable;

__END__

=head1 NAME

npg_run_is_deletable

=head1 USAGE

=head1 REQUIRED ARGUMENTS

 either run id or runfolder path should be supplied

=head1 OPTIONS

=head1 EXIT STATUS

0 if run is deletable, 1 otherwise

=head1 CONFIGURATION

=head1 SYNOPSIS

run_is_deletable --runfolder_path /some/runfolder/dir
run_is_deletable --id_run 1234
run_is_deletable --runfolder_path /some/runfolder/dir --lims-driver-type ml_warehouse_auto

=head1 DESCRIPTION

This script checks whether run data are correctly archived and it is safe
to delete the run folder from the staging area. It uses cached LIMs information,
which is stored in a samplesheet. If -lims-driver-type argiment is set, up-to-date
LIMs information is retrieved from a system corresponding to this driver type.

If a file or directory named "npg_do_not_delete" is present in the run folder,
the run folder is considered as not deletable.

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item lib

=item FindBin

=item Log::Log4perl

=item npg_pipeline::validation

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Steven Lennard
Marina Gourtovaia

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2019 Genome Research Limited

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
